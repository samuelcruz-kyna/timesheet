// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Inquiries {
  id            Int      @id @default(autoincrement())
  firstName     String
  lastName      String
  contactNo     String
  emailAddress  String
  subject       String
  message       String
  status        String   @default("pending")
  transactionNo String   @unique
  created       DateTime @default(now())
  modified      DateTime @updatedAt
}

model Employee {
  id             Int            @id @default(autoincrement())
  firstName      String
  lastName       String
  gender         Gender
  employeeNo     String         @unique
  Timesheets     Timesheet[]
  DailySummaries DailySummary[]
  PaymentRecords PaymentRecord[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  User           User?          @relation("EmployeeUser")
  payRate        PayRate?
}

model User {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  password   String
  status     String   @default("ACTIVE")
  employeeID String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  employee   Employee @relation(fields: [employeeID], references: [employeeNo], name: "EmployeeUser")
}

model Timesheet {
  id         Int      @id @default(autoincrement())
  time       DateTime @default(now())
  type       String
  employeeID Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  employee   Employee @relation(fields: [employeeID], references: [id])
}

model DailySummary {
  id            Int            @id @default(autoincrement())
  employeeId    Int
  date          DateTime
  totalTime     Int
  employee      Employee       @relation(fields: [employeeId], references: [id])
  paymentRecord PaymentRecord? @relation("dailySummary")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@unique([employeeId, date])
}

model PaymentRecord {
  id             Int           @id @default(autoincrement())
  employeeId     Int
  date           DateTime
  payAmount      Float
  dailySummaryId Int           @unique
  status         PaymentStatus @default(Unpaid) // New status field with default "Unpaid"
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  employee      Employee      @relation(fields: [employeeId], references: [id])
  dailySummary  DailySummary  @relation(fields: [dailySummaryId], references: [id], name: "dailySummary")

  @@unique([employeeId, date])
}

model PayRate {
  id               Int      @id @default(autoincrement())
  employeeId       Int      @unique
  payRate          Float
  payRateSchedule  String
  effectiveDate    DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  employee         Employee @relation(fields: [employeeId], references: [id])
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum InquiryStatus {
  PENDING
  READ
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum TimesheetType {
  TIME_IN
  TIME_OUT
  BREAK
}

enum PaymentStatus {
  Paid
  Unpaid
}